{"version":3,"sources":["components/TopNav.js","components/data.js","components/Answers.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","style","color","quiz_data","id","quiz","answers","rightAnswer","Answers","props","useState","clickCheck","setClickCheck","trueCheck","setTrueCheck","score","loadScore","map","answer","index","key","onClick","e","target","textContent","onAnswer","type","marginTop","CheckCircleFilled","margin","CloseCircleFilled","Quiz","data","setData","setScore","useEffect","className","window","location","reload","item","title","borderBottom","Header","Layout","Content","App","start","setStart","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efcbffd1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function TopNav() {\r\n    return (\r\n        <div>\r\n            <h1 style={{ color: \"white\" }}>REACT HOOKS - QUIZ APP</h1>\r\n        </div>\r\n    )\r\n}\r\n","let quiz_data = [\r\n    {\r\n        id: 1,\r\n        quiz: \"Who is stupid ?\",\r\n        answers: [\"Kien\", \"Nigga\", \"Tien Van\"],\r\n        rightAnswer: \"Kien\"\r\n    },\r\n    {\r\n        id: 2,\r\n        quiz: \"Who is pro 2?\",\r\n        answers: [\"hieu\", \"hieu\", \"hieu\"],\r\n        rightAnswer: \"hieu\"\r\n    },\r\n    {\r\n        id: \"099099\",\r\n        quiz: \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"093909\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"009039\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"090089\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"01010101\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"092299\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"099099\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"222099\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"2222099\"\r\n    },\r\n    {\r\n        quiz:\r\n            \"how build the app ?\",\r\n        answers: [\"vinayak\", \"sarthak\", \"somil\", \"devesh\"],\r\n        rightAnswer: \"vinayak\",\r\n        id: \"09922099\"\r\n    },\r\n];\r\nexport default quiz_data;","import React, { useState } from 'react'\r\nimport { Button } from 'antd';\r\nimport { CheckCircleFilled, CloseCircleFilled } from '@ant-design/icons'\r\n\r\nexport default function Answers(props) {\r\n    const [clickCheck, setClickCheck] = useState(true);\r\n    const [trueCheck, setTrueCheck] = useState(null);\r\n\r\n    var { score, loadScore, answers, rightAnswer } = props;\r\n\r\n    const onAnswer = (e, rightAnswer) => {\r\n        setClickCheck(false);\r\n        if (e.target.textContent === rightAnswer) {\r\n            score++;\r\n            loadScore(score);\r\n            setTrueCheck(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {clickCheck ? answers.map((answer, index) => (\r\n                <Button\r\n                    key={answer.index}\r\n                    onClick={(e) => onAnswer(e, rightAnswer)}>{answer}</Button>\r\n            )) : <Button type=\"primary\">{rightAnswer}</Button>}\r\n            {clickCheck ? \"\" : trueCheck\r\n                ? <div style={{ marginTop: 30 }}><CheckCircleFilled style={{ color: 'green', margin: 10 }} />Correct!</div>\r\n                : <div style={{ marginTop: 30 }}><CloseCircleFilled style={{ color: 'red', margin: 10 }} />Incorrect!</div>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport quiz_data from './data'\r\nimport Answers from './Answers'\r\nimport { Card, Button } from 'antd';\r\n\r\nexport default function Quiz() {\r\n    const [data, setData] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const loadQuestions = () => {\r\n        setData(quiz_data);\r\n    }\r\n    const loadScore = (score) => {\r\n        setScore(score);\r\n    }\r\n    useEffect(() => {\r\n        loadQuestions();\r\n    })\r\n    const playAgain = () => {\r\n        setScore(0);\r\n        window.location.reload();\r\n    }\r\n    return (\r\n        <div className=\"site-card-border-less-wrapper\">\r\n            <Button onClick={playAgain}>Play Again!</Button>\r\n            <h2>Score: {score}</h2>\r\n            {data.map(item => (\r\n                <Card title={item.quiz} style={{ borderBottom: '0.5px solid' }} key={item.id}>\r\n                    <Answers score={score} loadScore={loadScore} key={item.id} answers={item.answers} rightAnswer={item.rightAnswer} />\r\n                </Card>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport TopNav from './components/TopNav'\nimport Quiz from './components/Quiz'\nimport { Layout, Button } from 'antd';\n\n\nconst { Header, Content } = Layout;\n\nfunction App() {\n  const [start, setStart] = useState(false);\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header className=\"header\"><TopNav /></Header>\n        {!start\n          ? <Button className=\"get-started-button\" onClick={() => setStart(true)}> Get Started</Button>\n          : <Content className=\"content\"> <Quiz /></Content>}\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}